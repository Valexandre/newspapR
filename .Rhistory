# Describe your package
fusen::fill_description(
pkg = here::here(),
fields = list(
Title = "NewspapR : les bouts de codes bien utiles",
Description = "Tous les bouts de codes très utiles au Parisien.",
`Authors@R` = c(
person("Victor", "Alexandre", email = "valexandre@leparisien.fr", role = c("aut", "cre")),
person(given = "Le Parisien", role = "cph")
)
)
)
# Define License with use_*_license()
usethis::use_mit_license("Victor Alexandre")
library(dplyr)
library(testthat)
# Load already included functions if relevant
pkgload::load_all(export_all = FALSE)
#' sortunjpeg Sort un jpeg
#'
#' @param graph L'objet à afficher dans le jpeg
#' @param largeur La largeur en pixels
#' @param hauteur La hauteur en pixels
#' @param titre Le nom du jpeg qui sera exporté, sans l'extension
#' @return un fichier contenant l'objet appelé image
#'
#' @importFrom grDevices jpeg
#' @export
#'
#' @examples
sortunjpeg<-function(graph,largeur,hauteur,titre){
jpeg(filename = paste0(titre,".jpg"), width=largeur, height = hauteur, quality=100, units = "px",type="cairo")
plot(x)
dev.off()
}
sampledata<-tibble(x=1:10,y=1:10)
graphique<-sampledata%>%ggplot()+
geom_point(aes(x,y))
library(ggplot2)
graphique<-sampledata%>%ggplot()+
geom_point(aes(x,y))
sortunjpeg(sampledata,"a","b","coucou")
expect_error(sortunjpeg(sampledata,"a","b","coucou"))
sortunjpeg(graphique,200,200,"graphiquedetest")
sortunjpeg(graph=graphique,200,200,"graphiquedetest")
sortunjpeg<-function(graph,largeur,hauteur,titre){
jpeg(filename = paste0(titre,".jpg"), width=largeur, height = hauteur, quality=100, units = "px",type="cairo")
plot(graph)
dev.off()
}
sortunjpeg(graphique,200,200,"graphiquedetest")
test_that("sortunjpeg bugs", {
expect_error(sortunjpeg(sampledata,"a","b","coucou"))
})
that("test sortunjpeg marche", {
sampledata<-tibble(x=1:10,y=1:10)
out <- sortunjpeg(graphique,200,200,"graphiquedetest")
expect_true(out == "graphiquedetest.jpeg")
})
test_that("sortunjpeg bugs", {
expect_error(sortunjpeg(sampledata,"a","b","coucou"))
})
test_that("test sortunjpeg marche", {
sampledata<-tibble(x=1:10,y=1:10)
out <- sortunjpeg(graphique,200,200,"graphiquedetest")
expect_true(out == "graphiquedetest.jpeg")
})
test_that("sortunjpeg bugs", {
expect_error(sortunjpeg(sampledata,"a","b","coucou"))
})
test_that("test sortunjpeg marche", {
sampledata<-tibble(x=1:10,y=1:10)
out <- sortunjpeg(graphique,200,200,"graphiquedetest")
expect_true(out == "graphiquedetest.jpg")
})
out
sampledata<-tibble(x=1:10,y=1:10)
out <- sortunjpeg(graphique,200,200,"graphiquedetest")
out
expect_true(out == "jpeg")
# Run but keep eval=FALSE to avoid infinite loop
# Execute in the console directly
fusen::inflate(flat_file = "dev/flat_minimal.Rmd", vignette_name = "Minimal")
library(newspapR)
sortunjpeg(iris%>%ggplot()+)
fusen:::addin_add_template()
library(dplyr)
library(ggplot2)
library(testthat)
sampledata<-tibble(x=1:10,y=1:10)
graphique2<-sampledata%>%ggplot()+
geom_point(aes(x,y))
sortunsvg(graphique2,2,2,"graphiquedetest")
sortunsvg<-function(graph,largeur,hauteur,titre){
svglite(filename = paste0(titre,".svg"), width=largeur, height = hauteur, standalone=TRUE)
plot(graph)
dev.off()
}
sortunsvg(graphique2,2,2,"graphiquedetest")
library(svglite)
sortunsvg(graphique2,2,2,"graphiquedetest")
# Run but keep eval=FALSE to avoid infinite loop
# Execute in the console directly
fusen::inflate(flat_file = "dev/flat_sortunsvg.Rmd", vignette_name = "Sort un svg")
rm(list = c("sortunsvg"))
# Run but keep eval=FALSE to avoid infinite loop
# Execute in the console directly
fusen::inflate(flat_file = "dev/flat_sortunsvg.Rmd", vignette_name = "Sort un svg")
library(dplyr)
library(tidyverse)
library(ggplot2)
library(svglite)
library(testthat)
# Run but keep eval=FALSE to avoid infinite loop
# Execute in the console directly
fusen::inflate(flat_file = "dev/flat_sortunsvg.Rmd", vignette_name = "Sort un svg")
# Run but keep eval=FALSE to avoid infinite loop
# Execute in the console directly
fusen::inflate(flat_file = "dev/flat_sortunsvg.Rmd", vignette_name = "Sort un svg")
# Run but keep eval=FALSE to avoid infinite loop
# Execute in the console directly
fusen::inflate(flat_file = "dev/flat_minimal.Rmd", vignette_name = "Minimal")
# Run but keep eval=FALSE to avoid infinite loop
# Execute in the console directly
fusen::inflate(flat_file = "dev/flat_minimal.Rmd", vignette_name = "Minimal")
# Run but keep eval=FALSE to avoid infinite loop
# Execute in the console directly
fusen::inflate(flat_file = "dev/flat_sortunsvg.Rmd", vignette_name = "Sort un svg")
# Run but keep eval=FALSE to avoid infinite loop
# Execute in the console directly
fusen::inflate(flat_file = "dev/flat_minimal.Rmd", vignette_name = "Minimal")
# Run but keep eval=FALSE to avoid infinite loop
# Execute in the console directly
fusen::inflate(flat_file = "dev/flat_minimal.Rmd", vignette_name = "Minimal")
# Run but keep eval=FALSE to avoid infinite loop
# Execute in the console directly
fusen::inflate(flat_file = "dev/flat_sortunsvg.Rmd", vignette_name = "Sort un svg")
fusen:::addin_add_template()
nuancier <- function(couldep,coularr,nombre){
CreeMoiUnGradient <- colorRampPalette(c(couldep, coularr))
CreeMoiUnGradient(nombre)
}
nuancier("white","#CC2828",5)
expect_equal(nuancier("white","#CC2828",5),c("#FFFFFF","#F2C9C9","#E59393", "#D85D5D","#CC2828"))
nuancier("white",2,5)
nuancier(1,2,5)
nuancier(1,"a",5)
expect_error(nuancier(1,"a",5),"Error")
expect_error(nuancier(1,"a",5),"incorrect")
# Run but keep eval=FALSE to avoid infinite loop
# Execute in the console directly
fusen::inflate(flat_file = "dev/flat_nuancier.Rmd", vignette_name = "Nuancier")
# Run but keep eval=FALSE to avoid infinite loop
# Execute in the console directly
fusen::inflate(flat_file = "dev/flat_minimal.Rmd", vignette_name = "Minimal")
# Run but keep eval=FALSE to avoid infinite loop
# Execute in the console directly
fusen::inflate(flat_file = "dev/flat_minimal.Rmd", vignette_name = "Minimal")
# Run but keep eval=FALSE to avoid infinite loop
# Execute in the console directly
fusen::inflate(flat_file = "dev/flat_nuancier.Rmd", vignette_name = "Nuancier")
library(newspapR)
newspapR::nuancier
newspapR::nuancier_5_jaune_cramoisi
# Run but keep eval=FALSE to avoid infinite loop
# Execute in the console directly
fusen::inflate(flat_file = "dev/flat_minimal.Rmd", vignette_name = "Minimal")
usethis::use_data_raw()
my_dataset <- readr::read_csv("data-raw/couleursdelacharte.csv")
View(my_dataset)
my_dataset <- readr::read_csv("data-raw/couleursdelacharte.csv")
couleurscharte <- readr::read_csv("data-raw/couleursdelacharte.csv")
usethis::use_data(couleurscharte, overwrite = TRUE)
devtools::check()
usethis::use_r("couleurscharte")
devtools::build(vignettes = TRUE)
usethis::use_github()
remotes::install_local(build_vignettes = TRUE)
# Run but keep eval=FALSE to avoid infinite loop
# Execute in the console directly
fusen::inflate(flat_file = "dev/flat_minimal.Rmd", vignette_name = "Minimal")
# Run but keep eval=FALSE to avoid infinite loop
# Execute in the console directly
fusen::inflate(flat_file = "dev/flat_sortunsvg.Rmd", vignette_name = "Sort un svg")
library(newspapR)
devtools::build(vignettes = TRUE)
usethis::use_git_remote(
name = "origin",
url = "https://github.com/Valexandre/newspapR.git",
overwrite = TRUE
)
usethis::use_git_remote(
name = "main",
url = "https://github.com/Valexandre/newspapR.git",
overwrite = TRUE
)
usethis::use_git_remote(
name = "origin",
url = "https://github.com/Valexandre/newspapR.git",
overwrite = TRUE
)
